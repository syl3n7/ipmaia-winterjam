version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-winterjam}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-winterjam}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      SESSION_SECRET: ${SESSION_SECRET:-change-this-in-production}
      FRONTEND_URL: ${FRONTEND_URL:-http://192.168.1.69:3000}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@ipmaia.pt}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
    ports:
      - "3001:3001"
    volumes:
      - backend_uploads:/app/uploads

  # Frontend
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://192.168.1.69:3001/api}
    ports:
      - "3000:3000"

volumes:
  postgres_data:
  backend_uploads: